[gd_resource type="VisualShader" load_steps=14 format=3 uid="uid://dq1mirr4517le"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_yeqyq"]
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_yeqyq"]
operator = 3

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_10vpg"]
parameter_name = "TextureParameterTriplanar"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_10vpg"]
parameter_name = "Alpha"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_yeqyq"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2orbp"]
parameter_name = "Strength"
default_value_enabled = true
default_value = 5.0

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_yeqyq"]
parameter_name = "WaterMap"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_10vpg"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_2orbp"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_mmav0"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_fbl6t"]
operator = 2

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_yeqyq"]
parameter_name = "ColorParameter"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_yeqyq"]
parameter_name = "Rough"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, depth_test_default, cull_back, diffuse_lambert, specular_schlick_ggx, vertex_lighting;

uniform float Strength = 5.0;
uniform sampler2D WaterMap;
uniform vec4 ColorParameter : source_color;
uniform float Alpha;
uniform float Rough;
uniform sampler2D TextureParameterTriplanar;


// TextureParameterTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureParameterTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
// Input:4
	vec3 n_out4p0 = VERTEX;


// FloatParameter:12
	float n_out12p0 = Strength;


// VectorCompose:11
	float n_in11p0 = 0.00000;
	float n_in11p2 = 0.00000;
	vec3 n_out11p0 = vec3(n_in11p0, n_out12p0, n_in11p2);


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(WaterMap, UV);
	float n_out3p1 = n_out3p0.r;


// VectorOp:7
	vec3 n_out7p0 = n_out11p0 * vec3(n_out3p1);


// VectorOp:6
	vec3 n_out6p0 = n_out4p0 + n_out7p0;


// ColorParameter:8
	vec4 n_out8p0 = ColorParameter;


// FloatParameter:10
	float n_out10p0 = Alpha;


// FloatParameter:9
	float n_out9p0 = Rough;


// Output:0
	VERTEX = n_out6p0;
	COLOR.rgb = vec3(n_out8p0.xyz);
	COLOR.a = n_out10p0;
	ROUGHNESS = n_out9p0;


}

void fragment() {
// TextureParameterTriplanar:4
	vec4 n_out4p0 = triplanar_texture(TextureParameterTriplanar, triplanar_power_normal, triplanar_pos);


// Input:2
	vec4 n_out2p0 = COLOR;
	float n_out2p4 = n_out2p0.a;


// ColorOp:3
	vec3 n_out3p0 = max(vec3(n_out4p0.xyz), vec3(n_out2p0.xyz));


// Output:0
	ALBEDO = n_out3p0;
	ALPHA = n_out2p4;
	EMISSION = vec3(n_out4p0.xyz);


}
"
flags/vertex_lighting = true
nodes/vertex/0/position = Vector2(2100, 900)
nodes/vertex/2/node = SubResource("VisualShaderNodeTexture2DParameter_yeqyq")
nodes/vertex/2/position = Vector2(-1420, 500)
nodes/vertex/3/node = SubResource("VisualShaderNodeTexture_10vpg")
nodes/vertex/3/position = Vector2(-480, 860)
nodes/vertex/4/node = SubResource("VisualShaderNodeInput_2orbp")
nodes/vertex/4/position = Vector2(-120, 280)
nodes/vertex/6/node = SubResource("VisualShaderNodeVectorOp_mmav0")
nodes/vertex/6/position = Vector2(1280, 400)
nodes/vertex/7/node = SubResource("VisualShaderNodeVectorOp_fbl6t")
nodes/vertex/7/position = Vector2(500, 640)
nodes/vertex/8/node = SubResource("VisualShaderNodeColorParameter_yeqyq")
nodes/vertex/8/position = Vector2(540, 1160)
nodes/vertex/9/node = SubResource("VisualShaderNodeFloatParameter_yeqyq")
nodes/vertex/9/position = Vector2(560, 2020)
nodes/vertex/10/node = SubResource("VisualShaderNodeFloatParameter_10vpg")
nodes/vertex/10/position = Vector2(500, 1580)
nodes/vertex/11/node = SubResource("VisualShaderNodeVectorCompose_yeqyq")
nodes/vertex/11/position = Vector2(-700, 220)
nodes/vertex/12/node = SubResource("VisualShaderNodeFloatParameter_2orbp")
nodes/vertex/12/position = Vector2(-1380, -20)
nodes/vertex/connections = PackedInt32Array(2, 0, 3, 2, 4, 0, 6, 0, 7, 0, 6, 1, 6, 0, 0, 0, 3, 1, 7, 1, 8, 0, 0, 6, 9, 0, 0, 8, 10, 0, 0, 7, 11, 0, 7, 0, 12, 0, 11, 1)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_yeqyq")
nodes/fragment/2/position = Vector2(-1940, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorOp_yeqyq")
nodes/fragment/3/position = Vector2(-640, -160)
nodes/fragment/4/node = SubResource("VisualShaderNodeTextureParameterTriplanar_10vpg")
nodes/fragment/4/position = Vector2(-1880, -820)
nodes/fragment/connections = PackedInt32Array(2, 4, 0, 1, 2, 0, 3, 1, 3, 0, 0, 0, 4, 0, 3, 0, 4, 0, 0, 5)
